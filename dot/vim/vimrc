" vim: set foldmethod=marker foldlevel=0 nomodeline:
" Anton Rybakov vimrc file
" External dependencies:
"     curl - for downloading vim-plug on first initialization
"     fzf  - for fuzzy search functionality

" Return Vim 8 default settings {{{

unlet! skip_defaults_vim
let s:defaults_file_location = $VIMRUNTIME . '/defaults.vim'
if !empty(glob(s:defaults_file_location))
  source $VIMRUNTIME/defaults.vim
endif

" }}}

" Install Vim-Plug automatically {{{

" Determine OS
if !exists("g:os")
  if has("win64") || has("win32") || has("win16")
    let g:os = "Windows"
  else
    let g:os = substitute(system('uname'), '\n', '', '')
  endif
endif

if g:os == "Windows"
  let g:vimfolder = "vimfiles"
else
  let g:vimfolder = ".vim"
endif

let g:plug_plugged_location = expand('~') . '/' . g:vimfolder . '/plugged'
let g:plug_file_location = expand('~') . '/' . g:vimfolder . '/autoload/plug.vim'

if empty(glob(g:plug_file_location))
  execute 'silent !curl -fLo '
    \ . g:plug_file_location
    \ . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  augroup init_install
    au!	
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  augroup END
endif
" }}}

" Plugins plugged by Vim-Plug {{{
call plug#begin(g:plug_plugged_location)

" Vim infrastructure plugin
Plug 'junegunn/vader.vim'

" General purpose plugins
Plug 'tpope/vim-sensible'    " Defaults everyone can agree on
Plug 'tpope/vim-surround'    " Easy parentheses and etc
Plug 'tpope/vim-commentary'  " Comment staff out
Plug 'tpope/vim-sleuth'      " Heuristically set buffer options
Plug 'tpope/vim-speeddating' " Increment dates, times, and more
Plug 'tpope/vim-eunuch'      " Helpers for UNIX
Plug 'tpope/vim-obsession'   " Continuously updated session files

" NOTE: Previously fzf was be installed with vim itself but now I prefer
"       to install it and manager with system package manager
"       this plugin still required as dependency for fzf.vim
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" TODO: Consider moving to vim-vinegar forever)
Plug 'tpope/vim-vinegar'
" Plug 'preservim/nerdtree'  " A tree explorer plugin
Plug 'itchyny/lightline.vim' " A light statusline
Plug 'mhinz/vim-startify'    " The fancy start screen for Vim

" Additional text objects
Plug 'kana/vim-textobj-user'   " Create your own text objects
Plug 'kana/vim-textobj-entire' " Text objects for entire buffer

" Colorschemes
" Commented were used by me previously
" Plug 'morhetz/gruvbox'
" Plug 'sjl/badwolf'
Plug 'junegunn/seoul256.vim'
Plug 'ghifarit53/tokyonight-vim'
Plug 'shinchu/lightline-seoul256.vim'
" TODO: the repo was archived -> find a new one

" Markdown support
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" Emacs org-mode filetype plugin
Plug 'axvr/org.vim'

" Personal wiki plugin
Plug 'lervag/wiki.vim'

" Distraction free writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" Git supporting
Plug 'tpope/vim-fugitive'     " Illegal Git wrapper
Plug 'airblade/vim-gitgutter' " Diff markers in the sign column
Plug 'junegunn/gv.vim'        " A git commit browser

" Common programming plugins
Plug 'tpope/vim-dispatch'      " Asynchronous build and test dispatcher
Plug 'tpope/vim-endwise'       " Wisely complete lang structures
Plug 'tpope/vim-apathy'        " Set the 'path' option for miscellaneous file types
Plug 'tpope/vim-projectionist' " Granular project configuration

" LSP client
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

" Asynchronous completion engine
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
" TODO: Maybe another backends should be added to async complete

" Linting
" Plug 'vim-syntastic/syntastic'
" Plug 'w0rp/ale'
" Plug 'rhysd/vim-lsp-ale'
" TODO: vim-lsp can provide diagnostics similar to ale
" 	as alternative vim-lsp itself can be used as backend to ale
" 	and not report diagnostics on its own

" UI plugins
Plug 'voldikss/vim-floaterm'
" Plug 't9md/vim-choosewin'

" REPL plugins
Plug 'jpalardy/vim-slime'

" VimScript
Plug 'tpope/vim-scriptease' " A Vim plugin for Vim plugins

" JSON
Plug 'tpope/vim-jdaddy'

" TOML
Plug 'cespare/vim-toml'

" Ruby
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'

" Rust
Plug 'rust-lang/rust.vim'

" Racket
Plug 'wlangstroth/vim-racket'

" Powershell
Plug 'PProvost/vim-ps1'

" Meson
Plug 'igankevich/mesonic'

" Graphviz
Plug 'liuchengxu/graphviz.vim'

" Tables
Plug 'dhruvasagar/vim-table-mode'

" Misc
" Plug 'vimsence/vimsence' " Presence for Discord
" Plug 'mfukar/robotframework-vim'
Plug 'khaveesh/vim-fish-syntax'

call plug#end()
" }}}

" Basic settings of Vim {{{
set nocompatible
set number
set colorcolumn=80
set visualbell

set splitbelow
set splitright

set backspace=indent,eol,start

set shiftwidth=4
set expandtab
set autoindent
set smartindent
set nowrap

set incsearch
set hlsearch
set ignorecase

" Map leaders
let mapleader = ","
let maplocalleader = "\\"

" }}}

" Setting up colorscheme {{{

if has('termguicolors') && empty($SSH_TTY) " Disabled because of Mosh
  set termguicolors
endif

" let g:tokyonight_style = 'night' " available: night, storm
" let g:tokyonight_enable_italic = 1
" silent! colorscheme tokyonight

let g:seoul256_srgb = 1
let g:seoul256_background = 254
silent! colorscheme seoul256

set background=light

" let g:lightline = {'colorscheme' : 'tokyonight'}
let g:lightline = {
      \ 'colorscheme' : 'seoul256',
      \ 'mode_map': {
        \ 'n' : 'N',
        \ 'i' : 'I',
        \ 'R' : 'R',
        \ 'v' : 'V',
        \ 'V' : 'VL',
        \ "\<C-v>": 'VB',
        \ 'c' : 'C',
        \ 's' : 'S',
        \ 'S' : 'SL',
        \ "\<C-s>": 'SB',
        \ 't': 'T',
        \ },
      \ }
set laststatus=2
set noshowmode

hi! link Terminal Normal
" TODO: Add color for dark version
let g:terminal_ansi_colors = [
    \ '#4e4e4e',
    \ '#af5f5f',
    \ '#5f885f',
    \ '#af8760',
    \ '#5f87ae',
    \ '#875f87',
    \ '#5f8787',
    \ '#e4e4e4',
    \ '#3a3a3a',
    \ '#870100',
    \ '#005f00',
    \ '#d8865f',
    \ '#0087af',
    \ '#87025f',
    \ '#008787',
    \ '#eeeeee',
    \ ]

" }}}

" Plugins settings {{{

" wiki.vim configuration
let g:wiki_filetypes = ['jat']
let g:wiki_link_extension = '.jat'
" NOTE: should be provided in the vimrc_local
" let g:wiki_root = ???

" vim-lsp configuration
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_virtual_text_enabled = 0

" vim-slime configuration
let g:slime_target = "vimterminal"

" vim-choosewin configuration
nmap - <Plug>(choosewin)

" Some old fix for background colors in 256 color terminals
" https://sunaku.github.io/vim-256color-bce.html
" TODO: Maybe it doesn't required anymore?
set t_ut=

" Default folding
set foldlevel=1

command! EditRC edit $MYVIMRC
command! LoadRC source $MYVIMRC
command! -nargs=* -complete=help Vhelp vertical belowright help <args>

" To prevent accident click
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>

nnoremap s <nop>
nnoremap sb :Buffers<CR>
nnoremap sf :Files<CR>
nnoremap srg :Rg<CR>
nnoremap scm :Commands<CR>

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" }}}

" Local vimrc {{{

let s:local_vimrc = expand('~') . '/' . g:vimfolder . '/vimrc_local'
if filereadable(s:local_vimrc)
  execute 'source' s:local_vimrc
endif

" }}}

