" vim: set foldmethod=marker foldlevel=0 nomodeline:
" Anton Rybakov vimrc file
" External dependencies:
"     curl - for downloading vim-plug on first initialization
"     fzf  - for fuzzy search functionality

" Return Vim 8 default settings {{{

unlet! skip_defaults_vim
let s:defaults_file_location = $VIMRUNTIME . '/defaults.vim'
if !empty(glob(s:defaults_file_location))
  source $VIMRUNTIME/defaults.vim
endif

" }}}

" Install Vim-Plug automatically {{{
if has("win64") || has("win32") || has("win16")
  let g:vimfolder = "vimfiles"
else
  let g:vimfolder = ".vim"
endif

let g:plug_plugged_location = expand('~') . '/' . g:vimfolder . '/plugged'
let g:plug_file_location = expand('~') . '/' . g:vimfolder . '/autoload/plug.vim'

if empty(glob(g:plug_file_location))
  execute 'silent !curl -fLo '
    \ . g:plug_file_location
    \ . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  augroup init_install
    au!	
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  augroup END
endif
" }}}

" Plugins plugged by Vim-Plug {{{
call plug#begin(g:plug_plugged_location)

" Plugins for Vimscript
Plug 'tpope/vim-scriptease' " A Vim plugin for Vim plugins
Plug 'junegunn/vader.vim'   " Testingg framework for Vimscript
Plug 'kana/vim-vspec'       " Another testing frameworka for Vimscript

" Core plugins
Plug 'tpope/vim-sensible'    " Defaults everyone can agree on
Plug 'tpope/vim-unimpaired'  " Complementary pairs of mappings
Plug 'tpope/vim-surround'    " It is all about 'surroundings'
Plug 'tpope/vim-commentary'  " Comments staff out. Oh, and it uncomments, too.
Plug 'tpope/vim-sleuth'      " Heuristically set indent options and encoding
Plug 'tpope/vim-speeddating' " Easily increment dates, times, and more
Plug 'tpope/vim-eunuch'      " Vim sugar for the UNIX shell commands
Plug 'tpope/vim-obsession'   " Continuously updated session files
Plug 'tpope/vim-vinegar'     " ...together like oil and vinegar

" Additional text objects
Plug 'kana/vim-textobj-user'   " Create your own text objects
Plug 'kana/vim-textobj-entire' " Text objects for entire buffer

" Better text editing are...
Plug 'godlygeek/tabular'          " ...align anything by symbol
Plug 'dhruvasagar/vim-table-mode' " ...neat tables as you type

" Misc plugins
Plug 'rhysd/vim-healthcheck' " Polyfill for :checkhealth in Vim
Plug 'mhinz/vim-startify'    " The fancy start screen for Vim

" Fuzzy searching :: https://en.wikipedia.org/wiki/Approximate_string_matching
" NOTE: Although fzf itself installed with system package manager
"       it is still required as dependency for the fzf.vim
Plug 'junegunn/fzf'     " General-purpose command-line fuzzy finder
Plug 'junegunn/fzf.vim' " Things you can do with fzf and Vim.

" Colorschemes (commented were used in the past)
" Plug 'jonstoler/werewolf.vim'         " Autoswitch between day/night theme
" Plug 'morhetz/gruvbox'
" Plug 'sjl/badwolf'
" Plug 'junegunn/seoul256.vim'
" Plug 'ghifarit53/tokyonight-vim'
" Plug 'plan9-for-vimspace/acme-colors' " For the day
" Plug 'andreasvc/vim-256noir'          " For the night
Plug 'bluz71/vim-moonfly-colors'        " Temporary solution

" VCS support plugins
Plug 'tpope/vim-fugitive'     " So awesome, it should be illegal
Plug 'junegunn/gv.vim'        " A git commit browser
Plug 'mhinz/vim-signify'      " Sign column as indicator

" Personal wiki plugin
Plug 'lervag/wiki.vim' " 'do one thing and do it well'

" Distraction free writing
Plug 'junegunn/goyo.vim'      " Means 'silence' in Korean
Plug 'junegunn/limelight.vim' " Hyperfocus-writing in Vim

" Common programming plugins
Plug 'tpope/vim-dispatch'      " Asynchronous build and test dispatcher
Plug 'tpope/vim-endwise'       " Wisely complete lang structures
Plug 'tpope/vim-apathy'        " Set the 'path' option for miscellaneous file types
Plug 'tpope/vim-projectionist' " Granular project configuration using 'projections'

" Tags file management
Plug 'ludovicchabant/vim-gutentags'

" LSP client :: https://en.wikipedia.org/wiki/Language_Server_Protocol
Plug 'prabirshrestha/vim-lsp'  " Async Language Server Protocol plugin
Plug 'mattn/vim-lsp-settings'  " Auto configurations for vim-lsp

" Asynchronous completion engine
Plug 'prabirshrestha/asyncomplete.vim'     " Async autocompletion with |timers|.
Plug 'prabirshrestha/asyncomplete-lsp.vim' " Bounds vim-lsp and asynccomplete.vim

" REPL plugins
Plug 'jpalardy/vim-slime' " From the Emacs world SLIME as it is

" Markup languages and serialization formats
Plug 'preservim/vim-markdown' " Markdown
Plug 'tpope/vim-jdaddy'       " JSON
Plug 'cespare/vim-toml'       " TOML

" Programming languages plugins
Plug 'rust-lang/rust.vim'       " Rust file detection, syntax and etc.
Plug 'wlangstroth/vim-racket'   " Racket file detection, syntax and etc.
Plug 'khaveesh/vim-fish-syntax' " Fish file detection, syntax and etc.
Plug 'PProvost/vim-ps1'         " Powershell file detection, syntax and etc.

" Build tools and etc.
Plug 'igankevich/mesonic'     " C/C++ Meson helper
Plug 'tpope/vim-rake'         " Ruby Rake helper
Plug 'tpope/vim-bundler'      " Ruby Bundler helper

" Other tools
Plug 'liuchengxu/graphviz.vim' " Graphviz helper

call plug#end()
" }}}

" Basic settings of Vim {{{
set nocompatible
set number
set colorcolumn=80
set visualbell

set splitbelow
set splitright

set backspace=indent,eol,start

set shiftwidth=4
set expandtab
set autoindent
set smartindent
set nowrap

set incsearch
set hlsearch
set ignorecase

" Map leaders
let mapleader = ","
let maplocalleader = "\\"

set laststatus=2
set foldlevel=1

if executable("rg")
    set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
    set grepformat=%f:%l:%c:%m
endif

" }}}

" Setting up colorscheme {{{

set termguicolors
silent! colorscheme moonfly

" }}}

" Plugins settings {{{

" wiki.vim configuration
" NOTE: g:wiki_root should be provided in the vimrc_local
let g:wiki_filetypes = ['jat']
let g:wiki_link_extension = '.jat'

" vim-lsp configuration
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_virtual_text_enabled = 0

" vim-slime configuration
let g:slime_target = "vimterminal"

" }}}

" Custom commands and mappings {{{

command! EditRC edit $MYVIMRC
command! EditRCLocal execute 'edit ' . $MYVIMRC . "_local"
command! LoadRC source $MYVIMRC
command! -nargs=* -complete=help Vhelp vertical belowright help <args>

" To prevent accident click
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>

nnoremap s <nop>
nnoremap sb :Buffers<CR>
nnoremap sf :Files<CR>
nnoremap srg :Rg<CR>
nnoremap scm :Commands<CR>

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes

    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" }}}

" Local vimrc {{{

let s:local_vimrc = expand('~') . '/' . g:vimfolder . '/vimrc_local'
if filereadable(s:local_vimrc)
  execute 'source' s:local_vimrc
endif

" }}}
